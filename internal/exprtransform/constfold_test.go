package exprtransform_test

import (
	"mltwist/internal/exprtransform"
	"mltwist/pkg/expr"
	"mltwist/pkg/expr/exprtools"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestConstFold(t *testing.T) {
	c1 := expr.NewConstUint[uint](25, expr.Width8)
	c2 := expr.NewConstInt[int16](-1, expr.Width16)

	tests := []struct {
		name string
		e    expr.Expr
		exp  expr.Expr
	}{{
		name: "add_const_no_width_change",
		e: expr.NewBinary(expr.Add,
			expr.NewConstUint[uint32](23, expr.Width32),
			expr.NewConstUint[uint32](0xffff, expr.Width32),
			expr.Width32,
		),
		exp: expr.NewConstUint[uint32](0xffff+23, expr.Width32),
	}, {
		name: "add_const_width",
		e: expr.NewBinary(expr.Add,
			expr.NewConstUint[uint8](23, expr.Width8),
			expr.NewConstUint[uint16](0xffff, expr.Width16),
			expr.Width32,
		),
		exp: expr.NewConstUint[uint32](0xffff+23, expr.Width32),
	}, {
		name: "add_const_multilayer",
		e: expr.NewBinary(expr.Add,
			expr.NewBinary(expr.Add, c1, c2, expr.Width32),
			expr.NewConstUint[uint](56899, expr.Width16),
			expr.Width32,
		),
		exp: expr.NewConstUint[uint32](25+0xffff+56899, expr.Width32),
	}, {
		name: "simplify_sub",
		e: expr.NewBinary(expr.Add,
			expr.NewBinary(expr.Sub, c1, c2, expr.Width32),
			expr.NewRegLoad("foo1", expr.Width16),
			expr.Width32,
		),
		exp: expr.NewBinary(expr.Add,
			expr.NewConstUint[uint32](26+0xffff0000, expr.Width32),
			expr.NewRegLoad("foo1", expr.Width16),
			expr.Width32,
		),
	}, {
		name: "eval_condition_no_cond_width",
		e: expr.NewCond(
			expr.Eq,
			expr.NewBinary(expr.Lsh,
				expr.NewConstUint[uint8](5, expr.Width8),
				expr.NewBinary(expr.Sub, c1, c2, expr.Width8),
				expr.Width32,
			),
			expr.NewConstUint[uint32](5<<26, expr.Width32),
			expr.NewConstUint[uint8](42, expr.Width16),
			expr.Zero,
			expr.Width32,
		),
		exp: expr.NewConstUint[uint8](42, expr.Width32),
	}, {
		name: "eval_condition_cond_width",
		e: expr.NewCond(expr.Eq,
			expr.NewBinary(expr.Lsh,
				expr.NewConstUint[uint8](5, expr.Width8),
				expr.NewBinary(expr.Sub, c1, c2, expr.Width8),
				expr.Width32,
			),
			expr.Zero,
			expr.NewConstUint[uint8](42, expr.Width8),
			expr.Zero,
			expr.Width16,
		),
		exp: expr.NewConstUint[uint8](42, expr.Width16),
	}, {
		name: "simplify_condition",
		e: expr.NewCond(expr.Lts,
			expr.NewBinary(expr.Mul,
				expr.NewConstUint[uint8](5, expr.Width8),
				expr.NewBinary(expr.Or,
					expr.NewConstUint[uint16](0x1234, expr.Width16),
					expr.NewConstUint[uint32](0xdbca8765, expr.Width32),
					expr.Width64,
				),
				expr.Width32,
			),
			expr.NewBinary(expr.Div,
				expr.NewBinary(expr.Mod,
					expr.NewConstUint[uint8](146, expr.Width32),
					expr.NewConstInt[int16](13, expr.Width16),
					expr.Width8,
				),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.NewConstUint[uint16](666, expr.Width16),
			expr.NewConstInt[int32](-1, expr.Width32),
			expr.Width16,
		),
		exp: expr.NewCond(expr.Lts,
			expr.NewConstUint(
				uint32(((0x1234|0xdbca8765)*5)&0xffffffff),
				expr.Width32,
			),
			expr.NewBinary(expr.Div,
				expr.NewConstUint[uint8](146%13, expr.Width8),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.NewConstUint[uint16](666, expr.Width16),
			expr.NewConstInt[int32](-1, expr.Width32),
			expr.Width16,
		),
	}, {
		name: "condition_simplify_args",
		e: expr.NewCond(expr.Leu,
			expr.NewConstUint[uint16](324, expr.Width16),
			expr.NewMemLoad("mem01",
				expr.NewConstUint[uint64](0xf3920bada83, expr.Width64),
				expr.Width8,
			),
			expr.NewBinary(expr.Div,
				expr.NewBinary(expr.Mod,
					expr.NewConstUint[uint8](146, expr.Width32),
					expr.NewConstInt[int16](13, expr.Width16),
					expr.Width8,
				),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.NewBinary(expr.Mul,
				expr.NewConstUint[uint8](5, expr.Width8),
				expr.NewBinary(expr.Or,
					expr.NewConstUint[uint16](0x1234, expr.Width16),
					expr.NewConstUint[uint32](0xdbca8765, expr.Width32),
					expr.Width64,
				),
				expr.Width32,
			),
			expr.Width64,
		),
		exp: expr.NewCond(expr.Leu,
			expr.NewConstUint[uint16](324, expr.Width16),
			expr.NewMemLoad("mem01",
				expr.NewConstUint[uint64](0xf3920bada83, expr.Width64),
				expr.Width8,
			),
			expr.NewBinary(expr.Div,
				expr.NewConstUint[uint8](146%13, expr.Width8),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.NewConstUint(
				uint32(((0x1234|0xdbca8765)*5)&0xffffffff),
				expr.Width32,
			),
			expr.Width64,
		),
	}, {
		name: "eval_condition_output_width_change",
		e: expr.NewCond(expr.Leu,
			expr.NewConstUint[uint16](323, expr.Width16),
			expr.NewConstUint[uint16](324, expr.Width16),
			expr.NewBinary(expr.Div,
				expr.NewBinary(expr.Mod,
					expr.NewConstUint[uint8](146, expr.Width32),
					expr.NewConstInt[int16](13, expr.Width16),
					expr.Width8,
				),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.NewBinary(expr.Mul,
				expr.NewConstUint[uint8](5, expr.Width8),
				expr.NewBinary(expr.Or,
					expr.NewConstUint[uint16](0x1234, expr.Width16),
					expr.NewConstUint[uint32](0xdbca8765, expr.Width32),
					expr.Width64,
				),
				expr.Width32,
			),
			expr.Width64,
		),
		exp: exprtools.NewWidthGadget(
			expr.NewBinary(expr.Div,
				expr.NewConstUint[uint8](146%13, expr.Width8),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.Width64,
		),
	}, {
		name: "eval_condition_intermediate_width_change_necessary",
		e: expr.NewBinary(expr.Add,
			expr.NewCond(expr.Leu,
				expr.NewConstUint[uint16](323, expr.Width16),
				expr.NewConstUint[uint16](324, expr.Width16),
				expr.NewBinary(expr.Div,
					expr.NewConstUint[uint8](98, expr.Width16),
					expr.NewRegLoad("foo2", expr.Width16),
					expr.Width64,
				),
				expr.NewConstUint[uint8](45, expr.Width8),
				expr.Width32,
			),
			expr.NewConstUint[uint8](64, expr.Width8),
			expr.Width64,
		),
		exp: expr.NewBinary(expr.Add,
			exprtools.NewWidthGadget(
				expr.NewBinary(expr.Div,
					expr.NewConstUint[uint8](98, expr.Width16),
					expr.NewRegLoad("foo2", expr.Width16),
					expr.Width64,
				),
				expr.Width32,
			),
			expr.NewConstUint[uint8](64, expr.Width8),
			expr.Width64,
		),
	}, {
		name: "eval_condition_intermediate_width_change_non_necessary",
		e: expr.NewBinary(expr.Add,
			expr.NewCond(expr.Leu,
				expr.NewConstUint[uint16](323, expr.Width16),
				expr.NewConstUint[uint16](324, expr.Width16),
				expr.NewBinary(expr.Div,
					expr.NewConstUint[uint8](98, expr.Width16),
					expr.NewRegLoad("foo2", expr.Width16),
					expr.Width16,
				),
				expr.NewConstUint[uint8](45, expr.Width8),
				expr.Width32,
			),
			expr.NewConstUint[uint8](64, expr.Width8),
			expr.Width64,
		),
		exp: expr.NewBinary(expr.Add,
			expr.NewBinary(expr.Div,
				expr.NewConstUint[uint8](98, expr.Width16),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width16,
			),
			expr.NewConstUint[uint8](64, expr.Width8),
			expr.Width64,
		),
	}, {
		name: "memory_address",
		e: expr.NewMemLoad("foo1",
			expr.NewBinary(expr.Div,
				expr.NewBinary(expr.Mod,
					expr.NewConstUint[uint8](146, expr.Width32),
					expr.NewConstInt[int16](13, expr.Width16),
					expr.Width8,
				),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.Width64,
		),
		exp: expr.NewMemLoad("foo1",
			expr.NewBinary(expr.Div,
				expr.NewConstUint[uint8](146%13, expr.Width8),
				expr.NewRegLoad("foo2", expr.Width16),
				expr.Width32,
			),
			expr.Width64,
		),
	}}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			res := exprtransform.ConstFold(tt.e)
			require.Equal(t, tt.exp, res)
		})
	}
}
